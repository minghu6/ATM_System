#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.7
# In conjunction with Tcl version 8.6
#    Mar 23, 2016 05:06:58 PM
import sys
import time

if __name__=='__main__':
    from login import Result,Login
    from login_tk_support import init
    import  deal_list
else:
    from .login import Result,Login
    from .login_tk_support import init


from minghu6.gui import TkUtil

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

"""
################################################################################
ATM 登陆界面的GUI主窗口
主要登陆功能由login模块实现，登陆并启动ATM 客户端(client)成功时，开启一个监视线程
在ATM 客户端“正常”（非重启）退出时,
登出服务器并强行退出login进程（有时候不稳定，但不影响登出服务器）
################################################################################
"""

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Login_Toplevel (root)
    init(root, top)##
    from minghu6.gui.appearance import showonCenter
    showonCenter(root)
    #root.mainloop()

w = None
def create_Login_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Login_Toplevel (w)
    init(w, top, *args, **kwargs)##
    return (w, top)

def destroy_Login_Toplevel():
    global w
    w.destroy()
    w = None

def quit_Login_Toplevel():
    global w
    w.quit()
    w = None



class Login_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'

        #_bgcolor='white'
        #_fgcolor='yellow'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("313x120+941+177")
        top.title("Login")
        top.configure(background="#d9d9d9")

        self.top=top


        self.button_ok=TkUtil.Button(top)
        #self.button_ok = Button(top)
        self.button_ok.place(relx=0.26, rely=0.67, height=28, width=49)
        #self.button_ok.configure(activebackground="#d9d9d9")
        #self.button_ok.configure(activeforeground="#000000")
        #self.button_ok.configure(background=_bgcolor)
        #self.button_ok.configure(disabledforeground="#a3a3a3")
        #self.button_ok.configure(foreground="#000000")
        #self.button_ok.configure(highlightbackground="#d9d9d9")
        #self.button_ok.configure(highlightcolor="black")
        #self.button_ok.configure(pady="0")
        self.button_ok.configure(text='''登陆''')
        self.button_ok.configure(width=49)
        self.button_ok['state']=DISABLED

        self.entry_passwd = Entry(top)
        self.entry_passwd.place(relx=0.22, rely=0.42, relheight=0.14, relwidth=0.68)
        self.entry_passwd.configure(background="white")
        self.entry_passwd.configure(disabledforeground="#a3a3a3")
        self.entry_passwd.configure(font="TkFixedFont")
        self.entry_passwd.configure(foreground="#000000")
        self.entry_passwd.configure(insertbackground="black")
        self.entry_passwd.configure(width=214)

        self.entry_passwd['show']='*'

        self.button_cancel = TkUtil.Button(top)
        #self.button_cancel = Button(top)
        self.button_cancel.place(relx=0.73, rely=0.67, height=28, width=59)
        #self.button_cancel.configure(activebackground="#d9d9d9")
        #self.button_cancel.configure(activeforeground="#000000")
        #self.button_cancel.configure(background=_bgcolor)
        #self.button_cancel.configure(command=login_tk_support)
        #self.button_cancel.configure(disabledforeground="#a3a3a3")
        #self.button_cancel.configure(foreground="#000000")
        #self.button_cancel.configure(highlightbackground="#d9d9d9")
        #self.button_cancel.configure(highlightcolor="black")
        #self.button_cancel.configure(pady="0")
        self.button_cancel.configure(text='''取消''')
        self.button_cancel.configure(width=59)

        self.Label1=TkUtil.Label(top)
        #self.Label1 = Label(top)
        self.Label1.place(relx=0.0, rely=0.42, height=23, width=57)
        self.Label1.configure(background=_bgcolor)
        #self.Label1.configure(disabledforeground="#a3a3a3")
        #self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''密码:''')
        self.Label1.configure(width=57)

        self.entry_id = Entry(top)
        self.entry_id.place(relx=0.22, rely=0.17, relheight=0.14, relwidth=0.68)
        self.entry_id.configure(background="white")
        #self.entry_id.configure(disabledforeground="#a3a3a3")
        #self.entry_id.configure(font="TkFixedFont")
        #self.entry_id.configure(foreground="#000000")
        #self.entry_id.configure(insertbackground="black")
        self.entry_id.configure(width=214)

        self.Label2=TkUtil.Label(top)
        #self.Label2 = Label(top)
        self.Label2.place(relx=0.00, rely=0.17, height=23, width=57)
        self.Label2.configure(background=_bgcolor)
        #self.Label2.configure(disabledforeground="#a3a3a3")
        #self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''卡号:''')
        self.Label2.configure(width=47)

        self.menubar = Menu(top, bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)



        self.entry_id.insert(0,'')
        self.entry_passwd.insert(0,'')
        self.register_funcs()
        #self.entry_passwd.focus()
        self.entry_id.focus()
        #self.button_ok.config(style='Toolbutton')


    def active_btn(self, event=None):
        '''
        active the button_ok   激活按键OK
        '''
        def validate():
            return self.entry_id and self.entry_passwd.get()

        if validate():
            self.button_ok['state'] = ACTIVE

    def close(self):
        """
        登录程序login_tk close方式退出
        :return:
        """
        global w
        w=self.top
        destroy_Login_Toplevel()

    def quit(self):
        """
        登录程序login_tk quit方式退出
        :return:
        """
        global w
        w=self.top
        quit_Login_Toplevel()

    def destroy(self):
        """
        登录程序login_tk destroy方式退出
        :return:
        """
        global w
        w=self.top
        destroy_Login_Toplevel()

    def hide(self):
        """
        隐藏登陆程序
        :return:
        """
        self.top.withdraw()

    def apply(self):
        """
        输入密码以后，按下按键以后执行的事件
        :return:
        """
        self.result =Result()#初始化Result结构体

        self.result.account_id = self.entry_id.get().strip()
        self.result.passwd = self.entry_passwd.get().strip()
        self.result.ok = True

        #连接服务器进行登录
        self.login_client=Login(self.result.account_id,self.result.passwd)
        if self.login_client.verified_account:#登陆成功
            self.hide()

            import threading
            def action():

                '''
                if popen.wait()!=None:#subprocess exit code
                    print('hello')
                    self.quit()

                print(popen.pid)
                '''
                while True:
                    self.login_client.popen.wait()

                    self.login_client.rebuild_connection()
                    if self.login_client.normal_quit()==True:
                        #self.quit()
                        import os
                        os._exit(0)

            threading.Thread(target=action,daemon=True).start()

    def register_funcs(self):
        """
        注册按键与快捷键所绑定的事件
        :return:
        """
        self.entry_passwd.bind('<KeyRelease>',lambda x:self.active_btn())
        self.entry_id.bind('<KeyRelease>',lambda x:self.active_btn())

        self.top.bind('<Return>',lambda x:self.apply())
        self.top.bind('<Escape>',lambda x:self.close())

        self.button_ok.configure(command=self.apply)

        self.button_cancel.configure(command=self.close)


        if not TkUtil.mac():
            self.top.bind("<Alt-u>", lambda *args: self.entry_id.focus())
            self.top.bind("<Alt-p>", lambda *args: self.entry_passwd.focus())



if __name__ == '__main__':
    vp_start_gui()



