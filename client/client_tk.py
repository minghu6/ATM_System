#! /usr/bin/env python3
# -*- Coding:utf-8 -*-


import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import client_tk_support

"""
################################################################################
# GUI module generated by PAGE version 4.7
# In conjunction with Tcl version 8.6
#    Mar 27, 2016 11:12:32 PM

################################################################################
"""

from xmlrpc.server import SimpleXMLRPCServer as rpcServer
from xmlrpc.server import SimpleXMLRPCRequestHandler as rpcRequestHandler
import xmlrpc.client

import time

from minghu6.gui.appearance import showonCenter

if __name__=='__main__':
    from SharedNames import HOST,PROCESSING_PORT
    import SharedNames
    import deal_list
else:
    from .SharedNames import HOST,PROCESSING_PORT
    from . import SharedNames
    from . import deal_list


def vp_start_gui(account_id):
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Client_TopLevel (root,account_id)
    client_tk_support.init(root, top)
    showonCenter(root)
    #root.mainloop()

w = None
def create_Client_TopLevel(root, account_id,*args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Client_TopLevel (w,account_id)
    client_tk_support.init(w, top, *args, **kwargs)

    return (w, top)

def destroy_Client_TopLevel():
    global w
    w.destroy()
    w = None


class Client_TopLevel:
    def __init__(self, top=None,account_id=0):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Lucidia Grande} -size 12 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"



        top.geometry("600x409+145+237")
        top.title("ATM Client")
        top.configure(background="#b4bdfe")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.btn_withdraw = Button(top)
        self.btn_withdraw.place(relx=0.78, rely=0.15, height=28, width=79)
        self.btn_withdraw.configure(activebackground="#d9d9d9")
        self.btn_withdraw.configure(activeforeground="#000000")
        self.btn_withdraw.configure(background=_bgcolor)
        self.btn_withdraw.configure(disabledforeground="#a3a3a3")
        self.btn_withdraw.configure(foreground="#000000")
        self.btn_withdraw.configure(highlightbackground="#d9d9d9")
        self.btn_withdraw.configure(highlightcolor="black")
        self.btn_withdraw.configure(pady="0")
        self.btn_withdraw.configure(takefocus="0")
        self.btn_withdraw.configure(text='''取款''')

        self.btn_deposit = Button(top)
        self.btn_deposit.place(relx=0.78, rely=0.29, height=28, width=79)
        self.btn_deposit.configure(activebackground="#d9d9d9")
        self.btn_deposit.configure(activeforeground="#000000")
        self.btn_deposit.configure(background=_bgcolor)
        self.btn_deposit.configure(disabledforeground="#a3a3a3")
        self.btn_deposit.configure(foreground="#000000")
        self.btn_deposit.configure(highlightbackground="#d9d9d9")
        self.btn_deposit.configure(highlightcolor="black")
        self.btn_deposit.configure(pady="0")
        self.btn_deposit.configure(takefocus="0")
        self.btn_deposit.configure(text='''存款''')

        self.btn_transfer = Button(top)
        self.btn_transfer.place(relx=0.78, rely=0.44, height=28, width=79)
        self.btn_transfer.configure(activebackground="#d9d9d9")
        self.btn_transfer.configure(activeforeground="#000000")
        self.btn_transfer.configure(background=_bgcolor)
        self.btn_transfer.configure(disabledforeground="#a3a3a3")
        self.btn_transfer.configure(foreground="#000000")
        self.btn_transfer.configure(highlightbackground="#d9d9d9")
        self.btn_transfer.configure(highlightcolor="black")
        self.btn_transfer.configure(pady="0")
        self.btn_transfer.configure(takefocus="0")
        self.btn_transfer.configure(text='''转账''')

        self.btn_ok = Button(top)
        self.btn_ok.place(relx=0.08, rely=0.88, height=28, width=69)
        self.btn_ok.configure(activebackground="#d9d9d9")
        self.btn_ok.configure(activeforeground="#000000")
        self.btn_ok.configure(background=_bgcolor)
        self.btn_ok.configure(disabledforeground="#a3a3a3")
        self.btn_ok.configure(foreground="#000000")
        self.btn_ok.configure(highlightbackground="#d9d9d9")
        self.btn_ok.configure(highlightcolor="black")
        self.btn_ok.configure(pady="0")
        self.btn_ok.configure(takefocus="0")
        self.btn_ok.configure(text='''确定''')

        self.btn_cancel = Button(top)
        self.btn_cancel.place(relx=0.78, rely=0.88, height=28, width=89)
        self.btn_cancel.configure(activebackground="#d9d9d9")
        self.btn_cancel.configure(activeforeground="#000000")
        self.btn_cancel.configure(background=_bgcolor)
        self.btn_cancel.configure(disabledforeground="#a3a3a3")
        self.btn_cancel.configure(foreground="#000000")
        self.btn_cancel.configure(highlightbackground="#d9d9d9")
        self.btn_cancel.configure(highlightcolor="black")
        self.btn_cancel.configure(pady="0")
        self.btn_cancel.configure(takefocus="0")
        self.btn_cancel.configure(text='''取消''')

        self.text_screen = Text(top)
        self.text_screen.place(relx=0.05, rely=0.07, relheight=0.69, relwidth=0.67)
        self.text_screen.configure(background="white")
        self.text_screen.configure(font=font10)
        self.text_screen.configure(foreground="black")
        self.text_screen.configure(highlightbackground="#d9d9d9")
        self.text_screen.configure(highlightcolor="black")
        self.text_screen.configure(insertbackground="black")
        self.text_screen.configure(selectbackground="#c4c4c4")
        self.text_screen.configure(selectforeground="black")
        self.text_screen.configure(takefocus="0")
        self.text_screen.configure(width=414)
        self.text_screen.configure(wrap=WORD)

        self.spinbox_amount = Spinbox(top, from_=100.0, to=20000.0,increment=100)
        self.spinbox_amount.place(relx=0.23, rely=0.81, relheight=0.05
                , relwidth=0.34)
        self.spinbox_amount.configure(activebackground="#f9f9f9")
        self.spinbox_amount.configure(background="white")
        self.spinbox_amount.configure(buttonbackground="#d9d9d9")
        self.spinbox_amount.configure(disabledforeground="#a3a3a3")
        self.spinbox_amount.configure(font=("Arial",12))
        self.spinbox_amount.configure(foreground="black")
        self.spinbox_amount.configure(from_="1.0")
        self.spinbox_amount.configure(highlightbackground="black")
        self.spinbox_amount.configure(highlightcolor="black")
        self.spinbox_amount.configure(insertbackground="black")
        self.spinbox_amount.configure(selectbackground="#c4c4c4")
        self.spinbox_amount.configure(selectforeground="black")
        self.spinbox_amount.configure(takefocus="0")

        self.menubar = Menu(top,font=font10,bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.connect_process()
        self.OK=False
        self.Cancel=False
        self.top=top
        self.account_id=account_id

        self.text_screen.focus()

        self.main_state()
        if deal_list.need_recorver(account_id):
            from tkinter.messagebox import askyesno,showinfo
            if askyesno('发现备份的清单文件','是否需要打印清单'):
                deal_list.print_deal_list(deal_list.recover(account_id))


    def handle_error(self, err):

        print(err)


    def connect_process(self):

        try:

            self.manager = xmlrpc.client.ServerProxy("http://{}:{}"
                                                 .format(HOST,PROCESSING_PORT),
                                                     allow_none=True)

        except (ConnectionError, xmlrpc.client.Fault) as err:
            self.handle_error(err)


    def press_btn_ok(self):
        """
        event after press on ok button
        :return:
        """
        self.OK=True

    def press_btn_cancel(self):
        """
        event after press on cancel button
        :return:
        """
        self.Cancel=True
        from tkinter.messagebox import askyesno
        if askyesno('提示','是否确定退出ATM系统？'):
            self.close()
        else:
            pass

    def close(self):
        """
        client_tk close
        :return:
        """
        global w
        w=self.top
        destroy_Client_TopLevel()




    def main_state(self):
        """
        Main State
        :return:
        """
        #init function register
        def register_funcs():
            '''
            init function register
            '''
            self.btn_transfer.configure(command=self.transfer_state)
            self.btn_withdraw.configure(command=self.withdraw_state)
            self.btn_deposit.configure(command=self.deposit_state)
            self.btn_ok.configure(command=lambda *args:self.press_btn_ok())
            self.btn_cancel.configure(command=lambda *args:self.press_btn_cancel())

            self.top.bind('<Enter>',lambda *args:self.press_btn_ok())
            self.top.bind('<Escape>',lambda *args:self.press_btn_cancel())
            self.top.bind('<F1>',lambda *args:self.withdraw_state())
            self.top.bind('<F2>',lambda *args:self.deposit_state())
            self.top.bind('<F3>',lambda *args:self.transfer_state())


        register_funcs()

        self.text_screen['state']=NORMAL
        self.btn_withdraw['state']=NORMAL
        self.btn_deposit['state']=NORMAL
        self.btn_transfer['state']=NORMAL
        self.btn_ok['state']=NORMAL
        self.btn_cancel['state']=NORMAL

        self.spinbox_amount['state']=DISABLED

        self.text_screen.delete('1.0',END)
        font_main="-family {Lucidia Grande} -size 18 -weight bold "
        self.text_screen.configure(font=font_main)
        cur_amount=self.manager.check_amount(self.account_id)
        main_state_str=('选择功能：\n\n'
                        '\t取款\n\n'
                        '\t存款\n\n'
                        '\t转账\n'
                        '\n卡号: \n{0:s}'
                        '\n账户余额:  {1:.2f}￥'.format(self.account_id,cur_amount))
        self.text_screen.insert('1.0',main_state_str)
        self.text_screen['state']=DISABLED
        #self.text_screen.


    def transfer_state(self):
        """
        Transfer State
        :return:
        """
        def start_transfer_func_window():
            #from minghu6.etc.launchmods import PortableLauncher as launch
            from subprocess import Popen,PIPE
            #call('python3 input_account_id_tk.py')
            try:
                pipe=Popen('python3 input_account_id_tk.py',stdout=PIPE)
            except:
                pipe=Popen('python input_account_id_tk.py',stdout=PIPE)

            out=pipe.stdout
            self.transfer_to_account_id=out.readline().decode()[:-2]

            print(self.transfer_to_account_id,len(self.transfer_to_account_id))
            if len(self.transfer_to_account_id)==0:

                return False #stop transfer
            elif self.transfer_to_account_id==self.account_id:
                from tkinter.messagebox import showwarning
                showwarning('警告','收取款不能是同一个账户')
            else:
                return True # continue to transfer
                #print(self.transfer_to_account_id,str(self.transfer_to_account_id))

        self.transfer_to_account_id=0
        if start_transfer_func_window():

            self.text_screen['state']=NORMAL
            self.spinbox_amount['state']=NORMAL
            self.text_screen.delete('1.0',END)
            self.text_screen.insert('1.0',('收款ID: %s\n\n'
                                           '\t\t\n请输入转账金额:'
                                           %self.transfer_to_account_id))

            self.text_screen['state']=DISABLED
            self.btn_deposit['state']=DISABLED
            self.btn_transfer['state']=DISABLED
            self.btn_withdraw['state']=DISABLED

            self.spinbox_amount.focus()

            def tranfer_amount_fromto_server():
                if not self.check_amount():
                    return
                self.text_screen['state']=NORMAL
                try:
                    amount,date_time_or_info=self.manager.transfer(self.account_id,self.transfer_to_account_id,
                                                 self.amount)
                    #self.text_screen.delete('1.0',END)
                    #self.text_screen.insert('1.0','\n\t现在账户余额是{0:.2f}￥'.format(amount))

                    #after transfer ,then commit
                    #self.text_screen.update_idletasks()

                    if amount<0:
                        self.text_screen.delete('1.0',END)
                        self.text_screen.insert('1.0',date_time_or_info)

                        self.text_screen.update_idletasks()
                        self.btn_ok.configure(command=lambda *args:self.cancel())
                    else:
                        self.print_deal_list_state(date_time_or_info,'转账',self.amount,self.account_id)

                except Exception as ex:
                    print(ex)

                    self.text_screen.delete('1.0',END)
                    self.text_screen.insert('1.0',ex)

                    self.text_screen.update_idletasks()
                    self.btn_ok.configure(command=lambda *args:self.cancel())
                    #time.sleep(3)


            self.btn_ok.configure(command=lambda *args:tranfer_amount_fromto_server())
            self.btn_cancel.configure(command=lambda *args:self.cancel())

            self.top.bind('<Return>',lambda *args:tranfer_amount_fromto_server())
            self.top.bind('<Escape>',lambda *args:self.cancel())

        else:
            self.main_state()

    def withdraw_state(self):
        """
        Withdraw state
        :return:
        """
        self.text_screen['state']=NORMAL
        self.text_screen.delete('1.0',END)
        self.text_screen.insert('1.0',('\n\n\t请输入取款数目'))

        self.text_screen['state']=DISABLED
        self.btn_deposit['state']=DISABLED
        self.btn_transfer['state']=DISABLED
        self.btn_withdraw['state']=DISABLED
        self.spinbox_amount['state']=NORMAL
        self.spinbox_amount.focus()

        def get_amount_from_server():

            if not self.check_amount():
                return
            self.text_screen['state']=NORMAL
            try:
                amount,date_time_or_info=self.manager.withdraw(self.account_id,self.amount)
                #self.text_screen.delete('1.0',END)
                #self.text_screen.insert('1.0','\n\t现在账户余额是{0:.2f}￥'.format(amount))
                #self.text_screen.update_idletasks()
                #time.sleep(2)

                if amount <0:#error occured in process
                    self.text_screen.delete('1.0',END)
                    self.text_screen.insert('1.0',date_time_or_info)
                    self.text_screen.update_idletasks()

                    self.btn_ok.configure(command=lambda *args:self.cancel())
                else:
                    self.print_deal_list_state(date_time_or_info,'取款',
                                               self.amount,self.account_id)


            except Exception as ex:
                print(ex)
                self.text_screen.delete('1.0',END)
                self.text_screen.insert('1.0',ex.__repr__())
                self.text_screen.update_idletasks()

                self.btn_ok.configure(command=lambda *args:self.cancel())

            self.text_screen['state']=DISABLED


        self.btn_ok.configure(command=lambda *args:get_amount_from_server())
        self.btn_cancel.configure(command=lambda *args:self.cancel())

        self.top.bind('<Return>',lambda *args:get_amount_from_server())
        self.top.bind('<Escape>',lambda *args:self.cancel())


    def deposit_state(self):
        """
        Deposit state
        :return:
        """
        self.text_screen['state']=NORMAL
        self.text_screen.delete('1.0',END)
        self.text_screen.insert('1.0',('\n\n\t请输入存款数目'))

        self.text_screen['state']=DISABLED
        self.btn_deposit['state']=DISABLED
        self.btn_transfer['state']=DISABLED
        self.btn_withdraw['state']=DISABLED

        self.spinbox_amount['state']=NORMAL
        self.spinbox_amount.focus()

        def deposit_amount_to_server():
            if not self.check_amount():
                return
            self.text_screen['state']=NORMAL

            amount,date_time=self.manager.deposit(self.account_id,self.amount)
            #self.text_screen.delete('1.0',END)
            #self.text_screen.insert('1.0','\n\t现在账户余额是{0:.2f}￥'.format(amount))
            #self.text_screen.update_idletasks()
            #time.sleep(2)

            self.print_deal_list_state(date_time,'存款',self.amount,self.account_id)


        self.btn_ok.configure(command=lambda *args:deposit_amount_to_server())
        self.btn_cancel.configure(command=lambda *args:self.cancel())

        self.top.bind('<Return>',lambda *args:deposit_amount_to_server())
        self.top.bind('<Escape>',lambda *args:self.cancel())


    def print_deal_list_state(self,server_date,action_name,amount,account_id,**dict):
        """
        print deal list state
        :param server_date:
        :param action_name:
        :param amount:
        :param account_id:
        :param dict:
        :return:
        """

        self.text_screen['state']=NORMAL
        self.text_screen.delete('1.0',END)
        self.text_screen.insert('1.0',('\n\n\t交易成功\n\n\t是否打印交易清单？'))
        self.text_screen.update_idletasks()

        self.text_screen['state']=DISABLED
        self.btn_deposit['state']=DISABLED
        self.btn_transfer['state']=DISABLED
        self.btn_withdraw['state']=DISABLED

        def get_deal_list():

            bank=self.manager.get_bank(account_id)
            msg='\n'.join(['交易时间: '+server_date,
                           '操作名称: '+action_name,
                           '卡    号: '+str(account_id),
                           '金    额: '+str(amount),
                           '银行名称: '+bank])
            return msg

        msg=get_deal_list()

        def press_ok(msg):

            '''
            self.text_screen['state']=NORMAL
            self.text_screen.delete('1.0',END)
            self.text_screen.insert('1.0','\n\n\t请稍等，打印中...')
            self.btn_cancel['state']=DISABLED
            self.text_screen.update()
            time.sleep(2)#wait 2 second to simulate the process

            self.text_screen.delete('1.0',END)
            self.text_screen.insert('1.0',('\n\n\t打印完毕\n\n'
                                           '\t谢谢惠顾'))
            self.text_screen.update()
            time.sleep(2)
            '''

            deal_list.print_deal_list(msg)
            deal_list.undo_bakeup(account_id)
            self.main_state()

        def press_cancel():
            #self.text_screen['state']=NORMAL
            #self.text_screen.update()
            #self.text_screen.delete('1.0',END)
            #self.text_screen.insert('1.0','\n\n\n\t谢谢惠顾！')
            #self.text_screen.update()
            #time.sleep(1.5)

            deal_list.undo_bakeup(account_id)

            self.main_state()


        if not self.manager.commit():
            def timeout_print():
                self.text_screen['state']=NORMAL
                self.text_screen.delete('1.0',END)
                self.text_screen.insert('1.0',('\n\n\t操作超时，交易已取消'))
                self.text_screen.update_idletasks()
                self.text_screen['state']=DISABLED
                time.sleep(1.5)
            timeout_print()
            self.main_state()
        else:
            deal_list.bakeup(self.account_id,msg)

            self.btn_ok.configure(command=lambda *args:press_ok(msg))
            self.btn_cancel.configure(command=lambda *args:press_cancel())

            self.top.bind('<Return>',lambda *args:press_ok(msg))
            self.top.bind('<Escape>',lambda *args:press_cancel())





    def check_amount(self):
        """
        check if the input format is valid
        :return: bool
        """
        try:
            self.get_amount()
        except self.AmountValueError:
            from tkinter.messagebox import showerror
            showerror('AmountValueError','请输入正确金额\n')
            return False
        else:
            return True

    def get_amount(self):
        """
        check amount of the account from bank
        :return: amount
        """
        self.amount=float(self.spinbox_amount.get())
        if not isinstance(self.amount,(int,float)) or self.amount<=0:
            raise self.AmountValueError('请检查输入的金额\n')

        #TODO server

    def cancel(self):
        """

        :return:main_state
        """
        self.main_state()
    class AmountValueError(Exception):pass
if __name__ == '__main__':
    if len(sys.argv)<=1:
        sys.argv=[sys.argv[0],'0']

    vp_start_gui(sys.argv[1])



